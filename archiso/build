#!/usr/bin/env bash

main() {
  set -euo pipefail
  if [[ -n "${DEBUG:-}" ]]; then set -x; fi
  if [[ -n "${TRACE:-}" ]]; then set -xv; fi

  # shellcheck source=vendor/lib/libsh.full.sh
  . "${0%/*}/../vendor/lib/libsh.full.sh"
  # shellcheck source=lib/common.sh
  . "${0%/*}/../lib/common.sh"

  if [[ ! -f /etc/arch-release ]]; then
    die "Program must run on Arch Linux. Try $(dirname "$0")/build-with-docker?"
  fi

  need_cmd basename
  need_cmd cat
  need_cmd cp
  need_cmd date
  need_cmd dirname
  need_cmd mkdir
  need_cmd mktemp
  need_cmd pacman
  need_cmd readlink
  need_cmd rm
  need_cmd uname

  section "Building an Arch Linux live image with ZFS support"

  local workdir
  workdir="$(mktemp_directory /home)" || die "Cannot create temporary workdir"
  cleanup_directory "$workdir"
  setup_traps cleanup

  local arch override_repo repo_path_prefix repo_path base_path
  # The current system architecture
  arch="$(uname -m)"
  # The name of the override repo
  override_repo="override"
  # The parent path of all local repos
  repo_path_prefix=/var/local/pacman
  # The parent path of the override repo
  repo_path="$repo_path_prefix/$override_repo/$arch"
  # The root directory where the source code lives
  base_path="$(readlink -f "$(dirname "$0")")"

  prepare "$workdir"
  add_override_repo "$workdir" "$base_path" "$override_repo" "$repo_path"
  add_zfs_repo "$workdir"
  add_zfs_package "$workdir"
  add_openssh "$workdir"
  build_image "$workdir" "$base_path"

  info "All done, image is in $base_path/out"
}

cleanup() {
  set +e
  if [[ -n "${WEB_PID:-}" ]]; then
    info "Stopping web server"
    kill "$WEB_PID"
  fi
  trap_cleanup_files
}

prepare() {
  local workdir="$1"

  info "Preparing system and $workdir"

  mkdir -pv "$workdir"
  # Freshen package database, upgrade, and install the 'archiso`
  # and supporting packages
  pacman -Syyu --noconfirm archiso wget
  cp -rv /usr/share/archiso/configs/releng/* "$workdir"
  # Set a custom version for the ISO which includes time of day
  # shellcheck disable=SC2016
  sed -i -e 's,^\(iso_version\)=.*$,\1="$(date --iso-8601=minutes --utc)",' \
    "$workdir/profiledef.sh"
}

add_override_repo() {
  local workdir="$1"
  local base_path="$2"
  local override_repo="$3"
  local repo_path="$4"

  if has_local_override_repo "$override_repo"; then
    local local_repo_path content
    local_repo_path="$(readlink -f "$base_path/$override_repo")"

    info "Detected [$override_repo] repository to use for bootstrapping"

    mkdir -pv "$repo_path"
    cp -rv "$local_repo_path"/*.pkg.tar.zst* "$repo_path"

    find "$repo_path" -name '*.pkg.tar.zst' -print0 \
      | xargs -0 repo-add "$repo_path/$override_repo.db.tar.zst"

    start_web_server "$repo_path" "8000"

    # Read complex, interpolated string into a $content variable using leading
    # full tab indentation syntax
    read -r -d '' content <<-CONTENT
	#OVERRIDE_BEGIN
	[$override_repo]
	SigLevel = Optional TrustAll
	Server = http://127.0.0.1:8000
	#OVERRIDE_END
	CONTENT
    insert_into_pacman_conf "$content" "$workdir/pacman.conf"

    cat <<-'EOF' >>"$workdir/airootfs/root/customize_airootfs.sh"

	# Remove the temporary [override] repo
	sed -i -e '/#OVERRIDE_BEGIN/,/#OVERRIDE_END/{N;d;}' /etc/pacman.conf
	EOF
  fi
}

add_zfs_repo() {
  local workdir="$1"
  local gpg_key

  info "Fetching latest archzfs repository mirrorlist"
  mkdir -pv "$workdir/etc/pacman.d"
  download "https://git.io/Jsfw2" "/etc/pacman.d/mirrorlist-archzfs"

  info "Adding [archzfs] repository to $workdir/pacman.conf"
  insert_into_pacman_conf "$(archzfs_repo_block)" "$workdir/pacman.conf"

  info "Downloading [archzfs] repository key"
  gpg_key="$(mktemp_file)"
  cleanup_file "$gpg_key"
  download "https://archzfs.com/archzfs.gpg" "$gpg_key"
  pacman-key -a "$gpg_key"

  info "Importing [archzfs] repository key"
  pacman-key --lsign-key DDF7DB817396A49B2A2723F7403BD972F75D9D76
}

add_zfs_package() {
  local workdir="$1"

  info "Adding the archzfs-linux package to the image"
  echo "archzfs-linux" >>"$workdir/packages.x86_64"
}

add_openssh() {
  local workdir="$1"

  info "Adding the OpenSSH to the image"

  cat <<-'EOF' >>"$workdir/airootfs/root/customize_airootfs.sh"

	# Add user arch with no home directory, in group 'wheel' and using 'zsh'
	useradd -M -G wheel -s /usr/bin/zsh arch

	# Set passwords
	echo "arch:install" | chpasswd
	echo "root:install" | chpasswd

	# Enable sshd service
	systemctl enable sshd.service
	EOF
}

build_image() {
  local workdir="$1"
  local base_path="$2"

  info "Building image"

  cd "$workdir"
  mkdir -pv out
  mkarchiso -v -w "$workdir" -o out "$workdir" \
    || die "Building image failed, could kernel & zfs-linux be out of sync?"
  mkdir -v -p "$base_path/out"
  cp -v out/*.iso "$base_path/out/"
}

start_web_server() {
  local document_root="$1"
  local port="$2"

  pacman -S --noconfirm ruby-webrick
  need_cmd ruby

  # Start a webserver for override packages and background it. The cleanup
  # trap will kill the web server when this process terminates.
  ruby -rwebrick -e"
      WEBrick::HTTPServer.new(
        :Port => $port,
        :DocumentRoot => %{$document_root}
      ).start
    " &
  sleep 1
  WEB_PID=$!

  return 0
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  main "$@" || exit 99
fi
